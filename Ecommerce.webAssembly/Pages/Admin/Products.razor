@page "/products"
@inject IProductService ProductService
@inject SweetAlertService SweetAlertService
@inject IToastService ToastService
<div class="flex justify-center mt-3">
    <div class="w-full max-w-xs md:max-w-sm xl:max-w-xs mb-4">
        <div class="grid gap-1 w-full mx-auto">
            <a class="btn btn-primary" href="/product">New product</a>
        </div>
    </div>
    <div class="w-full md:max-w-md xl:max-w-lg mb-4">
        <div class="flex items-center border border-gray-300 rounded-lg overflow-hidden">
            <input type="text" class="flex-grow px-3 py-2 outline-none" placeholder="Search Category..." @bind-value="_search">
            <button class="btn btn-sm btn-outline-danger flex items-center justify-center w-8 h-8" type="button" @onclick="async()=> await LoadProducts(_search)">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                    <path stroke-linecap="round" stroke-linejoin="round" d="m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z" />
                </svg>
            </button>
        </div>
    </div>
</div>

<div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 xl:grid-cols-4 gap-4 mt-2">
    @if (_products != null)
    {
        @foreach (var item in _products)
        {
            <div class="bg-white shadow-lg rounded-lg overflow-hidden relative">
                <!-- Badge de 'Nuevo' -->
                <div class="absolute bg-blue-500 text-white text-xs font-bold px-2 py-1 top-2 right-2 rounded">
                    new
                </div>

                <!-- Imagen del producto (altura aumentada) -->
                <img class="w-full h-72 object-cover border border-gray-300" src="@item.Image" alt="Product Image">

                <!-- Detalles del producto -->
                <div class="p-4 text-center">
                    <h5 class="font-bold text-lg">@item.Name</h5>

                    <!-- Precio -->
                    @if (@item.OfferPrice < @item.Price)
                    {
                        <p class="text-red-500 line-through">S/. @item.Price</p>
                        <p class="text-green-600 font-bold">S/. @item.OfferPrice</p>
                    }
                    else
                    {
                        <p class="text-gray-700 font-bold">S/. @item.Price</p>
                    }
                </div>

                <div class="bg-transparent p-4 flex justify-between">
                    <a class="btn btn-sm btn-outline-primary flex items-center justify-center w-10 h-10" href="/product/@item.Id">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M16.862 3.487a2.25 2.25 0 1 1 3.182 3.182L7.37 19.344a4.5 4.5 0 0 1-1.949 1.136l-3.014.753a.375.375 0 0 1-.46-.46l.753-3.014a4.5 4.5 0 0 1 1.136-1.949L16.862 3.487z" />
                        </svg>
                    </a>
                    <button class="btn btn-sm btn-outline-danger flex items-center justify-center w-10 h-10" type="button" @onclick="async () => await DeleteProduct(item.Id)">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>
            </div>
        }
    }
    else
    {
        <div class="flex justify-center items-center">
            <div class="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-gray-900"></div>
            <span class="ml-2 text-gray-600">Loading...</span>
        </div>
    }
</div>

@code {
    private List<ProductDto>? _products = [];
    private string _search = "";
    private async Task LoadProducts(string value="")
    {
        var response = await ProductService.ListAsync(value);
        _products= response is { Success: true } ? response.Data! : [];
    }
    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }
    private async Task DeleteProduct(int id)
    {
        var result = await SweetAlertService.FireAsync(new SweetAlertOptions
        {
            Title = "Are you sure?",
            Text = "Once deleted, you will not be able to recover this product!",
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true,
            ConfirmButtonText = "Yes, delete it!",
            CancelButtonText = "No, cancel!",
            ConfirmButtonColor = "#135D66",
            CancelButtonColor = "#135D66"
        });

        if (result.IsConfirmed)
        {
            var response = await ProductService.DeleteAsync(id);
            if (response is { Success: true })
            {
                await LoadProducts();
                ToastService.ShowSuccess("Product deleted successfully");
            }
            else
            {
                ToastService.ShowError(response.Message ?? "An error occurred");
            }
        }
    }
}