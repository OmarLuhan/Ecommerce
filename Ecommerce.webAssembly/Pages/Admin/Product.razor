@page "/product"
@page "/product/{id:int}"
@inject ICategoryService CategoryService
@inject IToastService ToastService
@inject NavigationManager NavigationManager
@inject IProductService ProductService

<div class="flex justify-center mt-3">
    <p class="w-full max-w-3xl text-xl font-semibold mt-2">@Title</p>
</div>

<div class="flex justify-center mt-3">
    <div class="w-full max-w-3xl bg-white p-6 shadow-md rounded-lg">
        <EditForm Model="Model" OnValidSubmit="SaveProductAsync">
            <DataAnnotationsValidator></DataAnnotationsValidator>

            <!-- Nombre -->
            <div class="mt-3">
                <label class="block font-medium text-gray-700">Name</label>
                <input type="text" class="w-full border rounded px-3 py-2 focus:outline-none focus:ring focus:border-blue-300" @bind-value="Model.Name">
                <ValidationMessage For="@(()=>Model.Name)" class="text-red-500 text-sm" />
            </div>

            <!-- Descripción -->
            <div class="mt-3">
                <label class="block font-medium text-gray-700">Description</label>
                <textarea class="w-full border rounded px-3 py-2 focus:outline-none focus:ring focus:border-blue-300" @bind="Model.Description"></textarea>
                <ValidationMessage For="@(()=>Model.Description)" class="text-red-500 text-sm" />
            </div>

            <!-- Categoría -->
            <div class="mt-3">
                <label class="block font-medium text-gray-700">Category</label>
                <select class="w-full border rounded px-3 py-2 focus:outline-none focus:ring focus:border-blue-300" value="@Model.CategoryId" @onchange="OnCategoryChange">
                    @foreach(var item in _categories)
                    {
                        <option value="@item.Id">@item.Name</option>
                    }
                </select>
            </div>

            <!-- Precio -->
            <div class="mt-3">
                <label class="block font-medium text-gray-700">Price</label>
                <input type="number" class="w-full border rounded px-3 py-2 focus:outline-none focus:ring focus:border-blue-300" @bind-value="Model.Price">
                <ValidationMessage For="@(()=>Model.Price)" class="text-red-500 text-sm" />
            </div>

            <!-- Precio Oferta -->
            <div class="mt-3">
                <label class="block font-medium text-gray-700">Offer Price</label>
                <input type="number" class="w-full border rounded px-3 py-2 focus:outline-none focus:ring focus:border-blue-300" @bind-value="Model.OfferPrice">
                <ValidationMessage For="@(()=>Model.OfferPrice)" class="text-red-500 text-sm" />
            </div>

            <!-- Cantidad -->
            <div class="mt-3">
                <label class="block font-medium text-gray-700">Stock</label>
                <input type="number" class="w-full border rounded px-3 py-2 focus:outline-none focus:ring focus:border-blue-300" @bind-value="Model.Stock">
                <ValidationMessage For="@(()=>Model.Stock)" class="text-red-500 text-sm" />
            </div>

            <!-- Imagen -->
            <div class="mt-3">
                <label class="block font-medium text-gray-700">Image url</label>
                <input type="text" class="w-full border rounded px-3 py-2 focus:outline-none focus:ring focus:border-blue-300" @bind-value="Model.Image">
                <ValidationMessage For="@(()=>Model.Image)" class="text-red-500 text-sm" />
            </div>

            <!-- Botones -->
            <div class="flex justify-between mt-4">
                <button type="submit" class="bg-blue-500 text-white px-6 py-2 rounded-lg hover:bg-blue-600 transition">
                    @ButtonText
                </button>
                <a href="/products" class="bg-gray-400 text-white px-6 py-2 rounded-lg hover:bg-gray-500 transition">
                    Back
                </a>
            </div>
        </EditForm>
    </div>
</div>


@code {
    [Parameter] 
    public int Id { get; set; }
    private string Title { get; set; } = "New Product";
    private string ButtonText { get; set; } = "Save";
    private ProductDto Model { get; set; } = new();
    private List<CategoryDto> _categories = [];
    
    protected override async Task OnParametersSetAsync()
    {
        if (Id != 0)
        {
            Title = "Edit Product";
            ButtonText = "Update";
            var response = await ProductService.GetProductAsync(Id);
            if (response is { Success: true })
            {
                Model = response.Data!;
            }
            else
            {
                ToastService.ShowError(response?.Message ?? "An error occurred");
            }
        }
    }
    private async Task LoadCategory()
    {
        var response = await CategoryService.ListAsync();
        _categories= response is { Success: true } ? response.Data! : [];
    }
    protected override async Task OnInitializedAsync()
    {
       await  LoadCategory();
       if(_categories.Count > 0 && Id == 0)
       {
           Model.CategoryId = _categories.First().Id;
       }
    }
    private void OnCategoryChange(ChangeEventArgs e)
    {
        Model.CategoryId = int.Parse(e.Value.ToString());
    }
    private async Task SaveProductAsync()
    {
        bool result = true;
        string message;
        if (Id != 0)
        {
            var response = await ProductService.UpdateAsync(Model);
            if(response!.Success)
            {
                message = "Product updated successfully";
                result = true;
            }
            else
            {
                message = response.Message?? "An error occurred";
                result = false;
            }
        }
        else
        {
            var response = await ProductService.CreateAsync(Model);
            if(response!.Success)
            {
                message = "Product created successfully";
            }
            else
            {
                message = response?.Message?? "An error occurred";
                result = false;
            }
        }
        if(result)
        {
            ToastService.ShowSuccess(message);
            NavigationManager.NavigateTo("/products");
        }
        else
        {
            ToastService.ShowError(message);
        }
    }
}