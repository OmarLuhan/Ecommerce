@page "/categories"
@inject ICategoryService CategoryService
@inject SweetAlertService SweetAlertService
@inject IToastService ToastService

<div class="flex justify-center mt-3">
    <div class="w-full max-w-xs md:max-w-sm xl:max-w-xs mb-4">
        <div class="grid gap-1 w-full mx-auto">
            <a class="btn btn-primary" href="/category">New category</a>
        </div>
    </div>
    <div class="w-full md:max-w-md xl:max-w-lg mb-4">
        <div class="flex items-center border border-gray-300 rounded-lg overflow-hidden">
            <input type="text" class="flex-grow px-3 py-2 outline-none" placeholder="Search Category..." @bind-value="_search">
            <button class="btn btn-sm btn-outline-danger flex items-center justify-center w-8 h-8" type="button" @onclick="async()=> await LoadCategory(_search)">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                    <path stroke-linecap="round" stroke-linejoin="round" d="m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z" />
                </svg>
            </button>
        </div>
    </div>
</div>

<div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 xl:grid-cols-4 gap-4 mt-2">

    @if(_categories != null)
    {
        @foreach (var item in _categories)
        {
            <div class="bg-white shadow-md rounded-lg overflow-hidden">
                <div class="p-4 text-center">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-12 h-12">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M9.568 3H5.25A2.25 2.25 0 0 0 3 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 0 0 5.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 0 0 9.568 3Z" />
                        <path stroke-linecap="round" stroke-linejoin="round" d="M6 6h.008v.008H6V6Z" />
                    </svg>
                </div>
                <div class="p-4">
                    <p class="m-1"><b>Name:</b> @item.Name</p>
                </div>
                <div class="bg-transparent p-4 flex justify-between">
                    <a class="btn btn-sm btn-outline-primary flex items-center justify-center w-10 h-10" href="/user/@item.Id">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M16.862 3.487a2.25 2.25 0 1 1 3.182 3.182L7.37 19.344a4.5 4.5 0 0 1-1.949 1.136l-3.014.753a.375.375 0 0 1-.46-.46l.753-3.014a4.5 4.5 0 0 1 1.136-1.949L16.862 3.487z" />
                        </svg>
                    </a>
                    <button class="btn btn-sm btn-outline-danger flex items-center justify-center w-10 h-10" type="button" @onclick="async () => await DeleteCategory(item.Id)">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>
            </div>
        }
    }
    else
    {
        <div class="flex justify-center">
            <div class="animate-spin rounded-full h-10 w-10 border-t-2 border-blue-500"></div>
        </div>
    }
</div>

@code {
    private List<CategoryDto>? _categories = [];
    private string _search = "";
    
    private async Task LoadCategory(string value="")
    {
        var response = await CategoryService.ListAsync(value);
        _categories= response is { Success: true } ? response.Data! : [];
    }
    protected override async Task OnInitializedAsync()
    {
        await LoadCategory();
    }
    private async Task DeleteCategory(int id)
    {
        var result = await SweetAlertService.FireAsync(new SweetAlertOptions
        {
            Title = "Are you sure?",
            Text = "Once deleted, you will not be able to recover this category!",
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true,
            ConfirmButtonText = "Yes, delete it!",
            CancelButtonText = "No, cancel!",
            ConfirmButtonColor = "#135D66",
            CancelButtonColor = "#135D66"
        });

        if (result.IsConfirmed)
        {
            var response = await CategoryService.DeleteAsync(id);
            if (response is { Success: true })
            {
                await LoadCategory();
                ToastService.ShowSuccess("Category deleted successfully");
            }
            else
            {
                ToastService.ShowError(response?.Message ?? "An error occurred");
            }
        }
    }
}